import json
import os
import random
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, BotCommandScopeDefault, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from aiogram import BaseMiddleware
from typing import Callable, Dict, Any, Awaitable
import csv

from aiogram.utils.markdown import hbold
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from gigachat import GigaChat  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat
from langchain.memory import ConversationBufferMemory
from dotenv import load_dotenv

load_dotenv()

# Bot setup
API_TOKEN = os.getenv('API_TOKEN')
ACCESS_TOKEN = os.getenv('ACCESS_TOKEN')

bot = Bot(token=API_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

memory = ConversationBufferMemory(return_messages=True)

# GigaChat setup
giga_chat = GigaChat(credentials=ACCESS_TOKEN, verify_ssl_certs=False)

messages = [
    "üî• –ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è!",
    "üí° –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
    "üòä –°–¥–µ–ª–∞–π –ø–∞—É–∑—É –∏ –æ—Ç–¥–æ—Ö–Ω–∏!",
    "üìå –ü–æ–º–Ω–∏: –≥–ª–∞–≤–Ω–æ–µ ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥!",
    "üåü –¢–≤–æ–∏ —É—Å–∏–ª–∏—è –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
]

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user(chat_id):
    users = load_users()
    if chat_id not in users:
        users.append(chat_id)
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=4)


async def send_daily_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ 18:00 –ø–æ –ú–æ—Å–∫–≤–µ."""
    users = load_users()
    if not users:
        print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    message = random.choice(messages)
    for chat_id in users:
        try:
            await bot.send_message(chat_id, hbold(message))  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id {chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


scheduler = AsyncIOScheduler()
scheduler.add_job(send_daily_message, CronTrigger(hour=18, minute=0, timezone="Europe/Moscow"))


# FSM States
class Registration(StatesGroup):
    name = State()
    last_name = State()
    field = State()
    question = State()
    username = State()


# –ü–æ–ª—è –≤—ã–±–æ—Ä–∞ –∏ –∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
fields = [
    ("–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "astro"),
    ("–ö–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∞", "space"),
    ("–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–∑–∏–∫–∞", "phys"),
    ("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç", "planets"),
    ("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "tech"),
    ("–ò—Å—Ç–æ—Ä–∏—è –∫–æ—Å–º–æ—Å–∞", "history")
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
field_buttons = InlineKeyboardBuilder()
for field_name, callback_code in fields:
    field_buttons.button(
        text=field_name[:20],  # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
        callback_data=f"field_{callback_code}"
    )
field_buttons.adjust(2)  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
field_buttons = field_buttons.as_markup()


async def set_commands():
    commands = [BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'),
                BotCommand(command='ask', description='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'),
                BotCommand(command='cancel', description='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


# Handlers
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_chat_id = message.chat.id
    save_user(user_chat_id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Registration.name)


@dp.message(StateFilter(Registration.name))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.last_name)


@dp.message(StateFilter(Registration.last_name))
async def process_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Å—Ñ–µ—Ä—É:", reply_markup=field_buttons)


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã
@dp.callback_query(StateFilter(Registration.last_name))
# @dp.callback_query(Text(startswith="field_"), StateFilter(Registration.last_name))
async def process_field(callback_query: types.CallbackQuery, state: FSMContext):
    callback_code = callback_query.data.split("field_")[1]

    # –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å—Ñ–µ—Ä—ã –ø–æ –∫–æ–¥—É
    field = next((name for name, code in fields if code == callback_code), None)

    if not field:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞.")
        return

    await state.update_data(field=field)
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(Registration.question)


@dp.message(StateFilter(Registration.question))
async def process_question(message: types.Message, state: FSMContext):
    await state.update_data(question=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Telegram (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @):")
    await state.set_state(Registration.username)


@dp.message(StateFilter(Registration.username))
async def process_username(message: types.Message, state: FSMContext):
    if not message.text.startswith("@"):  # Validation
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    user_data = await state.get_data()
    user_data["username"] = message.text

    # Save to CSV
    with open("users.csv", "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([user_data["name"], user_data["last_name"], user_data["field"], user_data["question"],
                         user_data["username"]])

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ß—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ /ask.")
    await state.clear()


class RegistrationMiddleware(BaseMiddleware):
    async def __call__(
            self, handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
            event: types.Message, data: Dict[str, Any]
    ) -> Any:
        """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥."""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not isinstance(event, types.Message):
            return await handler(event, data)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Ç–µ–∫—Å—Ç
        command = event.text.strip().split()[0].lower()

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if command == "/start":
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (FSM)
        state: FSMContext = data.get("state")
        state_data = await state.get_state()

        if state_data:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return await handler(event, data)

        # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_username = event.from_user.username

        if not user_username:
            await event.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.csv
        registered = False
        try:
            with open("users.csv", "r", encoding="utf-8") as file:
                reader = csv.reader(file)
                for row in reader:
                    if len(row) >= 5 and row[4][1:] == user_username:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º username –±–µ–∑ "@"
                        registered = True
                        break
        except FileNotFoundError:
            await event.answer("‚ö† –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if not registered:
            await event.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        return await handler(event, data)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ


# –ü–æ–¥–∫–ª—é—á–∞–µ–º Middleware
dp.message.middleware(RegistrationMiddleware())


class LoggingMiddleware(BaseMiddleware):
    LOG_FILE = "logs.csv"

    def __init__(self):
        super().__init__()
        self.create_log_file()

    def create_log_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
        if not os.path.exists(self.LOG_FILE):
            try:
                with open(self.LOG_FILE, "w", newline="", encoding="utf-8") as file:
                    writer = csv.writer(file)
                    writer.writerow(["username", "date_time", "message"])
                print(f"‚úÖ –§–∞–π–ª {self.LOG_FILE} —Å–æ–∑–¥–∞–Ω.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {self.LOG_FILE}: {e}")

    async def __call__(self, handler, event, data):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∏."""
        print(f"üü° Middleware –≤—ã–∑–≤–∞–Ω! –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event)}")

        if event.message and event.message.text:  # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º event.message
            username = event.message.from_user.username or f"user_{event.message.from_user.id}"
            message_text = event.message.text.strip()
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            print(f"üìú –õ–æ–≥–∏—Ä—É–µ–º: {username} | {timestamp} | {message_text}")

            try:
                with open(self.LOG_FILE, "a", newline="", encoding="utf-8") as file:
                    writer = csv.writer(file)
                    writer.writerow([username, timestamp, message_text])
                    file.flush()

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

        return await handler(event, data)


dp.update.middleware(LoggingMiddleware())


class Asking(StatesGroup):
    asking = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π /ask
def get_ask_keyboard():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="/ask")]],
        resize_keyboard=True
    )
    return keyboard


# –ö–æ–º–∞–Ω–¥–∞ /ask –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message(Command("ask"))
async def ask_question(message: types.Message, state: FSMContext):
    await state.set_state(Asking.asking)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ù–∞–ø–∏—à–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /cancel –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message(Command("cancel"))
async def cancel_asking(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=get_ask_keyboard())


# # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ Asking.asking
# @dp.message(Asking.asking)
# async def handle_question(message: types.Message, state: FSMContext):
#
#     response = giga_chat.chat(message.text)
#     answer = response.choices[0].message.content
#     words_in_answer = len(answer.split())
#
#     max_length = 700
#     confidence_score = min(words_in_answer / max_length, 1.0)
#
#     print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ GigaChat: {words_in_answer} —Å–ª–æ–≤, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_score}")
#
#     if confidence_score < 0:
#         await message.answer("–î–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–æ–º–æ—â–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å.")
#
#         user_field = None
#         with open("users.csv", "r", encoding="utf-8") as user_file:
#             user_reader = csv.reader(user_file)
#             for row in user_reader:
#                 if row[4][1:] == message.from_user.username:
#                     user_field = row[2]
#                     break
#
#         if user_field:
#             expert_found = False
#             with open("experts.csv", "r", encoding="utf-8") as expert_file:
#                 expert_reader = csv.reader(expert_file)
#                 for expert_row in expert_reader:
#                     if user_field in expert_row[2]:
#                         expert_username = expert_row[1]
#                         expert_found = True
#
#                         await bot.send_message(expert_username,
#                                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
#                         break
#
#             if not expert_found:
#                 await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞.")
#         else:
#             await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
#     else:
#         await message.answer(f"{answer}")

user_question_count = {}


@dp.message(Asking.asking)
async def handle_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_question_count[user_id] = user_question_count.get(user_id, 0) + 1

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    history = memory.load_memory_variables({})
    history_str = "\n".join([f"{msg.type}: {msg.content}" for msg in history.get("history", [])])

    # –ó–∞–ø—Ä–æ—Å –∫ GigaChat —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    response = giga_chat.chat(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history_str}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    answer = response.choices[0].message.content

    # –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å
    memory.save_context(
        {"input": f"User: {user_input}"},
        {"output": f"Bot: {answer}"}
    )
    words_in_answer = len(answer.split())

    max_length = 80
    confidence_score = min(words_in_answer / max_length, 1.0)

    print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ GigaChat: {words_in_answer} —Å–ª–æ–≤, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_score}")

    if confidence_score < 0.2:
        await message.answer("–î–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–æ–º–æ—â–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å.")

        user_field = None
        with open("users.csv", "r", encoding="utf-8") as user_file:
            user_reader = csv.reader(user_file)
            for row in user_reader:
                if row[4][1:] == message.from_user.username:
                    user_field = row[2]
                    break

        if user_field:
            expert_found = False
            with open("experts.csv", "r", encoding="utf-8") as expert_file:
                expert_reader = csv.reader(expert_file)
                for expert_row in expert_reader:
                    if user_field in expert_row[2]:
                        expert_username = expert_row[1]
                        expert_found = True

                        await bot.send_message(expert_username,
                                               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                        break

            if not expert_found:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await message.answer(f"{answer}")

    # # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # await message.answer(answer)

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞
    if user_question_count[user_id] == 5:
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 10:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /ask.",
        reply_markup=get_ask_keyboard()
    )


# Run bot
async def main():
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)
    await set_commands()


if __name__ == "__main__":
    asyncio.run(main())
